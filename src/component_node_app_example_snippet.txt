const axios = require('axios');
const { parse } = require('csv-parse/sync');
const fs = require('fs');

const componentGroupsBaseUrl = 'https://api.firehydrant.io/v1/nunc_connections/';
const authToken = 'BOT TOKEN HERE';
const statusPageId = 'STATUSPAGE URL HERE';
const csvFilePath = 'PATH TO CSV HERE';

const csvData = fs.readFileSync(csvFilePath, 'utf8');

async function main() {
  try {
    console.log('Processing CSV data');
    let response = await processCSV(csvData, authToken, statusPageId);
    console.log('CSV processed', response);
  } catch (error) {
    console.error('Error:', error);
  }
}

async function processSingleComponent(componentName, componentGroup, authToken, statusPageId) {
  console.log('Processing single component:', componentName, componentGroup);
  try {
    const infrastructureId = await fetchInfrastructureId(componentName, authToken);
    const componentGroupId = await fetchComponentGroupId(componentGroup, authToken, statusPageId);

    if (!infrastructureId) {
      throw new Error(`Infrastructure '${componentName}' not found.`);
    }
    if (!componentGroupId) {
      throw new Error(`Component Group '${componentGroup}' not found.`);
    }

    const component = {
      "infrastructure_type": "functionality",
      "infrastructure_id": infrastructureId,
      "component_group_id": componentGroupId
    };

    return await updateStatusPage({ components: [component] }, authToken, statusPageId);
  } catch (error) {
    console.error('Error in processSingleComponent:', error);
    return {
      statusCode: 400,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: error.message })
    };
  }
}

function chunkArray(array, chunkSize) {
  const chunkedArray = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    chunkedArray.push(array.slice(i, i + chunkSize));
  }
  return chunkedArray;
}

async function processCSV(csv, authToken, statusPageId) {
  console.log('Starting CSV processing');
  try {
    const records = parse(csv, {
      columns: true,
      skip_empty_lines: true
    });

    if (records.length === 0) {
      throw new Error('CSV is empty');
    }

    const batchSize = calculateBatchSize(records.length);
    const batches = chunkArray(records, batchSize);
    let processedResults = [];

    for (let batch of batches) {
      const processPromises = batch.map(row => 
        processSingleComponent(row.Component, row['Component Group'], authToken, statusPageId)
      );

      let results = await Promise.allSettled(processPromises);
      processedResults.push(...results.map(result => {
        if (result.status === 'fulfilled' && result.value.statusCode === 200) {
          return { status: 'fulfilled', value: JSON.parse(result.value.body) };
        } else if (result.status === 'fulfilled' && result.value.statusCode !== 200) {
          return { status: 'rejected', reason: JSON.parse(result.value.body).error };
        } else if (result.status === 'rejected') {
          return { status: 'rejected', reason: result.reason.message };
        }
      }));
    }

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ results: processedResults })
    };
  } catch (error) {
    console.error('Error processing CSV:', error);
    return { 
      statusCode: 500, 
      headers: { 'Content-Type': 'application/json' }, 
      body: JSON.stringify({ error: error.message }) 
    };
  }
}

function calculateBatchSize(totalRecords) {
  return 50; // Adjust this value based on your specific requirements
}

async function fetchInfrastructureId(name, authToken) {
  const baseUrl = 'https://api.firehydrant.io/v1/infrastructures';
  let currentPage = 1;
  let totalInfrastructuresProcessed = 0;

  try {
    while (true) {
      const url = `${baseUrl}?page=${currentPage}`;
      const response = await axios.get(url, {
        headers: { 'Authorization': `Bearer ${authToken}` }
      });

      const infrastructures = response.data.data;
      totalInfrastructuresProcessed += infrastructures.length;

      const infrastructure = infrastructures.find(item => item.infrastructure.name === name);
      if (infrastructure) {
        return infrastructure.infrastructure.id;
      }

      if (infrastructures.length < 20) {
        return null;
      }

      currentPage++;
    }
  } catch (error) {
    console.error('Error fetching infrastructure ID:', error);
    throw error;
  }
}

async function fetchComponentGroupId(name, authToken, statusPageId) {
  const componentGroupsUrl = `${componentGroupsBaseUrl}${statusPageId}`;
  try {
    const response = await axios.get(componentGroupsUrl, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    });
    const componentGroup = response.data.component_groups.find(group => group.name === name);
    return componentGroup ? componentGroup.id : null;
  } catch (error) {
    console.error('Error fetching component group ID:', error);
    throw error;
  }
}

async function updateStatusPage(payload, authToken, statusPageId) {
  try {
    const getStatusPageUrl = `${componentGroupsBaseUrl}${statusPageId}`;

    const getResponse = await axios.get(getStatusPageUrl, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    });

    let currentComponents = getResponse.data.components || [];
    const newComponents = payload.components;

    newComponents.forEach(newComp => {
      const existingIndex = currentComponents.findIndex(c => c.infrastructure_id === newComp.infrastructure_id);
      if (existingIndex !== -1) {
        currentComponents[existingIndex] = newComp;
      } else {
        currentComponents.push(newComp);
      }
    });

    const updateResponse = await axios.put(getStatusPageUrl, { components: currentComponents }, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    });

    return { statusCode: 200, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ message: 'Status page updated successfully', updateResponse: updateResponse.data }) };
  } catch (error) {
    console.error('Error updating status page:', error);
    return { statusCode: 500, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ error: 'Failed to update status page' }) };
  }
}

main();